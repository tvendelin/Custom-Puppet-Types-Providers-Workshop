Puppet::Type.type(:custom_type).provide :custom_provider1 do
	
	commands	:custom_command	=> '/bin/true'
	#confine		:feature		=> :custom_feature
	
	def initialize(args={})
		Puppet.notice "Creating an instance of %s for resource %s" % [ self.class, args[:name]]
		super(args)
	end
	
	# Class methods, run just once at the beginning
	# to establish the "is" state
	
	# Fetch all the instances of the resource type (both known and unknown to Puppet)
	# For each resource found, create an instance of provider class, 
	# and return them all as an array
	
	def self.instances
		Puppet.notice "Running self.instances method for class >%s<\n" % self
		get_custom_resource_instances.map {|inst| new(inst)} or []
	end
	
	# Match what already exists on the client with what is defined in the catalog.
	# Iterate through array returned by self.instances
	# If the resource that already exists on the client, is also defined in the catalog,
	# assign the provider instance to the catalog resource instance.
	
	# This also populates the @property_hash, containing all "is" properties
	# and visible to all instance methods (create, destroy, exists?, etc.)
			
	def self.prefetch( resources )
		Puppet.notice "Running self.prefetch method for class >%s<" % self
		instances.each do |provider|
			if resource = resources[provider.name]
				resource.provider = provider
			end
		end
	end
	
	# Return true, if the resource with this name already exists (in sync or not)
	def exists?
		Puppet.notice "%s: Running [%s] instance method" % [self.name, __method__]
		@property_hash[:ensure] == :present
	end
	
	# Create the resource, if it doesn't exist already
	def create
		Puppet.notice "%s: Running [%s] instance method" % [self.name, __method__]
	end
	
	# Destroy the resource, if it exists and must be destroyed
	def destroy
		Puppet.notice "%s: Running [%s] instance method" % [self.name, __method__]
		@property_hash[:ensure] = :absent
	end
	
	# Methods for checking and syncing properties of the resource
	# that already exists on the client system.
	
	mk_resource_methods
	# The above statement will generate getters and setters for all the properties
	# on the fly exactly as you see below, just without debug messages. You can still
	# selectively declare method(s) for some getters/setters, which will override
	# those generated by mk_resource_methods, while keeping the rest 
	# of getters/seters to their default form.  
	
	# Getters. Each is called in turn to get the "is"-state of the property
	
	def property_string1
		Puppet.notice "%s: Running [%s] instance method" % [self.name, __method__]
		@property_hash[:property_string1]
	end
	
	def property_string2
		Puppet.notice "%s: Running [%s] instance method" % [self.name, __method__]
		@property_hash[:property_string2]
	end
	
	def property_array1
		Puppet.notice "%s: Running [%s] instance method" % [self.name, __method__]
		@property_hash[:property_array1]
	end
	
	# Setters. Each is called after the respective "getter" method,
	# if the "is" value is different from "should" value.
	# The "should" value passed as an argument
	
	def property_string1=(v)
		Puppet.notice "%s: Running [%s] instance method, input is >%s<" % [self.name, __method__, v]
		@property_hash[:property_string1] = v
	end
	
	def property_string2=(v)
		Puppet.notice "%s: Running [%s] instance method, input is >%s<" % [self.name, __method__, v]
		@property_hash[:property_string2] = v
	end
	
	def property_array1=(v)
		Puppet.notice "%s: Running [%s] instance method, input is >%s<" % [self.name, __method__, v.join(',')]
		@property_hash[:property_array1] = v
	end
	
	# Optional method which is run the last
	def flush
		Puppet.notice "%s: Running [%s] instance method" % [self.name, __method__]
		
		if @property_hash[:ensure] == :present
			Puppet.notice "%s: modifying it" % self.name
			custom_command 'modify', @property_hash[:name], @property_hash[:property_string1],
				@property_hash[:property_string2], @property_hash[:property_array1].join(':')
		elsif @property_hash[:ensure] == :absent
			Puppet.notice "%s: destroying it" % self.name
			custom_command 'delete', @property_hash[:name]
		else
			Puppet.notice "%s: creating it" % self.name
			custom_command 'add', @resource[:name], @resource[:property_string1],
				@resource[:property_string2], @resource[:property_array1].join(':')
		end
		
		Puppet.notice "%s: Done flushing\n" % self.name
	end
	
	def refresh_me
		Puppet.notice "%s: I feel very refreshed!\n" % self.name
	end
	
	# Helper methods
	
	def self.get_custom_resource_instances
		[
			{	
				:name => 'resource1_orderly',
				:property_string1 =>'initial_value', 
				:property_string2 =>'initial_value', 
				:property_array1 => ['perl','python','ruby'], 
				:ensure => :present 
			},
			
			{	
				:name => 'resource2_to_modify',
				:property_string1 =>'initial_value', 
				:property_string2 =>'initial_value', 
				:property_array1 => ['perl','python','ruby'], 
				:ensure => :present 
			},
			
			{	
				:name => 'resource3_to_destroy',
				:property_string1 =>'initial_value', 
				:property_string2 =>'initial_value', 
				:property_array1 => ['perl','python','ruby'], 
				:ensure => :present 
			}
		]
	end
end




